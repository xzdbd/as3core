<?xml version="1.0" encoding="utf-8"?>
<!---
	前台分页组件.

	@mxml
	<p> 
	下面代码演示如何使用 <code>PageControl</code> 类： 
	<p>首先，引用命名空间  <b><code>xmlns:as3core="http://www.xzdbd.net/2013/flex/as3core"</code></b>，调用如下：</p>
	<pre>
	&lt;as3core:PageControl
		<b>Properties</b>
		topDataProvider="{queryResultAC}"
		hostComponent="{waterLevelDatagrid}"
		pageSize="8"
		autoPaging="false"
		
		<b>Styles</b> 
		paddingLeft="2" 
		paddingRight="2" /&gt;
	
	其中，queryResultAC 为一个总数据集，waterLevelDatagrid 为一个宿主组 DataGrid.
	</pre>
	</p>

	@author xzdbd
	创建于 2013-3-13,上午09:19:12.
-->
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  xmlns:as3core="com.xzdbd.as3core.*"
		  xmlns:supportClasses="com.xzdbd.as3core.components.supportClasses.*"
		  verticalAlign="middle"
		  width="100%"
		  minHeight="22"
		  gap="0"
		  creationComplete="init()" >
	
	<!--<fx:Script source="./PageControl.as" />-->
	
	<fx:Script>
		<![CDATA[
			import com.xzdbd.as3core.components.supportClasses.PageToolBar;
			
			import flash.events.Event;
			import flash.events.TimerEvent;
			import flash.utils.Timer;
			import flash.utils.setInterval;
			
			import mx.collections.ArrayCollection;
			import mx.controls.AdvancedDataGrid;
			import mx.controls.DataGrid;
			import mx.core.UIComponent;
			import mx.events.CollectionEvent;
			
			import spark.components.DataGroup;
			
			private var _hostComponent:UIComponent;
			private var _pageSize:int = 5;
			private var _pageDetailInfoVisible:Boolean = true;
			private var _pageCtrlToolsVisible:Boolean = true;
			//总数据集
			private var _topDataProvider:ArrayCollection;
			private var _currentPage:int = 1;
			private var _allRecordsCount:int = 0;
			private var _allPagesCount:int = 1;
			private var _autoPaging:Boolean;
			private var _pagingInterval:Number = 10000;
			
			//当前页数据集。
			[Bindable]
			private var curDataProvider:ArrayCollection;
			
			//自动翻页计时器。
			private var autoPagingTimer:Timer;
			
			[Bindable]
			/**
			 * 载体组件对象，必须为DataGrid，AdvancedDataGrid和DataGroup中的一种。
			 */
			public function get hostComponent():UIComponent
			{
				return _hostComponent;
			}
			
			/**
			 * @private
			 */
			public function set hostComponent(value:UIComponent):void
			{
				_hostComponent = value;
			}
			
			[Bindable]
			/**
			 * 分页的单页记录数，默认为 5。
			 */
			public function get pageSize():int
			{
				return _pageSize;
			}
			
			/**
			 * @private
			 */
			public function set pageSize(value:int):void
			{
				_pageSize = value;
			}
			
			[Bindable]
			/**
			 * 是否显示当前分页信息文本提示，默认显示。
			 */
			public function get pageDetailInfoVisible():Boolean
			{
				return _pageDetailInfoVisible;
			}
			
			/**
			 * @private
			 */
			public function set pageDetailInfoVisible(value:Boolean):void
			{
				_pageDetailInfoVisible = value;
			}
			
			[Bindable]
			/**
			 * 是否显示当前分页控制按钮，默认显示。
			 */
			public function get pageCtrlToolsVisible():Boolean
			{
				return _pageCtrlToolsVisible;
			}
			
			/**
			 * @private
			 */
			public function set pageCtrlToolsVisible(value:Boolean):void
			{
				_pageCtrlToolsVisible = value;
			}
			
			/**
			 * 当前分页载体对应的主要DataProvider（并非当前页数据集）。
			 */
			public function get topDataProvider():ArrayCollection
			{
				return _topDataProvider;
			}
			
			/**
			 * @private
			 */
			public function set topDataProvider(value:ArrayCollection):void
			{
				_topDataProvider = value;
				_topDataProvider.addEventListener(CollectionEvent.COLLECTION_CHANGE, dataProviderChangedHandler);
				reset();
			}
			
			[Bindable]
			/**
			 * 当前页码。
			 */
			public function get currentPage():int
			{
				return _currentPage;
			}
			
			/**
			 * @private
			 */
			public function set currentPage(value:int):void
			{
				_currentPage = value;
			}
			
			[Bindable]
			/**
			 * 当前数据集总记录数。
			 */
			public function get allRecordsCount():int
			{
				return _allRecordsCount;
			}
			
			/**
			 * @private
			 */
			public function set allRecordsCount(value:int):void
			{
				_allRecordsCount = value;
			}
			
			[Bindable]
			/**
			 * 当前数据集对应的总页数。
			 */
			public function get allPagesCount():int
			{
				return _allPagesCount;
			}
			
			/**
			 * @private
			 */
			public function set allPagesCount(value:int):void
			{
				_allPagesCount = value;
			}
			
			[Bindable]
			/**
			 * 数据载体控件是否自动计时翻页。
			 */
			public function get autoPaging():Boolean
			{
				return _autoPaging;
			}
			
			/**
			 * @private
			 */
			public function set autoPaging(value:Boolean):void
			{
				_autoPaging = value;
			}
			
			[Bindable]
			/**
			 * 自动翻页计时间隔。
			 */
			public function get pagingInterval():Number
			{
				return _pagingInterval;
			}
			
			/**
			 * @private
			 */
			public function set pagingInterval(value:Number):void
			{
				_pagingInterval = value;
			}
			
			/**
			 * 暂停自动翻页计时器,经指定时间间隔后恢复计时。
			 * @param pauseInterval 暂停时间。
			 */
			public function pauseAutoPaging(pauseInterval:Number = 10000):void
			{
				if(autoPaging)
				{
					autoPagingTimer.stop();
					setInterval(pauseTimer, pauseInterval);
					function pauseTimer():void
					{
						autoPagingTimer.start();
					}
				}
			}
			
			/**
			 * 按条件截取集合中的某一连续区段数据集。
			 * @param sourceAC 源数据集合。
			 * @param startIndex 开始截取的索引（包含）。
			 * @param length 截取的元素个数。
			 * @return 当前页数据集。
			 */
			public function getSubItems(sourceAC:ArrayCollection, startIndex:int, length:int):ArrayCollection
			{
				var targetAC:ArrayCollection = new ArrayCollection;
				for(var i:int=0; i<length; i++)
				{
					if(startIndex+i < sourceAC.length)
					{
						var obj:Object = sourceAC.getItemAt(startIndex+i);
						targetAC.addItem(obj);
					}
					else
					{
						break;
					}
					
				}
				return targetAC;
			}
			
			/**
			 * 设置更新分页。
			 * @param pageIndex 需要设置的页码。
			 */
			public function setPage(pageIndex:Number):void
			{
				if(topDataProvider)
				{
					if(pageIndex != 0 && pageIndex <= allPagesCount)
					{
						currentPage = pageIndex;
						curDataProvider = getSubItems(topDataProvider, (pageIndex-1)*pageSize, pageSize);
						if(hostComponent is DataGrid)
							(hostComponent as DataGrid).dataProvider = curDataProvider;
						else if(hostComponent is AdvancedDataGrid)
							(hostComponent as AdvancedDataGrid).dataProvider = curDataProvider;
						else if(hostComponent is DataGroup)
							(hostComponent as DataGroup).dataProvider = curDataProvider;
						updatePageControl();
					}
				}
			}
			
			/**
			 * 组件初始化函数。
			 */
			private function init():void
			{
				if(topDataProvider)
				{
					currentPage = 1;
					allRecordsCount = topDataProvider.length;
					if(allRecordsCount > 0)
						allPagesCount = (allRecordsCount - 1) / pageSize + 1;
					else
						allPagesCount = 1;
					curDataProvider = getSubItems(topDataProvider, 0, pageSize);
					updatePageControl();
				}
				if(autoPaging)
				{
					autoPagingTimer = new Timer(pagingInterval);
					autoPagingTimer.addEventListener(TimerEvent.TIMER, autoPagingTimerHandler);
				}
			}
			
			/**
			 * 在总数据集发生改变时调用该函数。
			 */
			private function dataProviderChangedHandler(event:CollectionEvent):void
			{
				reset();
			}
			
			/**
			 * 自动翻页计时监听。
			 */
			private function autoPagingTimerHandler(event:TimerEvent):void
			{
				if(currentPage < allPagesCount)
				{
					setPage(currentPage+1);
				}
				else
				{
					setPage(1);
				}
			}
			
			/**
			 * 重设翻页数据源和相关参数。
			 */
			private function reset():void
			{
				_topDataProvider.removeEventListener(CollectionEvent.COLLECTION_CHANGE, dataProviderChangedHandler);
				if(topDataProvider)
				{
					topDataProvider.refresh();
					
					currentPage = 1;
					allRecordsCount = topDataProvider.length;
					if(allRecordsCount > 0)
						allPagesCount = (allRecordsCount - 1) / pageSize + 1;
					else
						allPagesCount = 1;
					curDataProvider = getSubItems(topDataProvider, 0, pageSize);
					setPage(1);
					updatePageControl();
					
					//启动计时器
					if(autoPaging)
					{
						autoPagingTimer.reset();
						autoPagingTimer.start();
					}
				}
				_topDataProvider.addEventListener(CollectionEvent.COLLECTION_CHANGE, dataProviderChangedHandler);
			}
			
			/**
			 * 更新分页控制按钮状态。
			 */
			private function updatePageControl():void
			{
				allRecordsCount = topDataProvider.length;
				pageToolBar.updateToolBarState(currentPage, allPagesCount);
			}
			
			/**
			 * 分页工具栏单击选择。
			 */
			private function pageToolBar_linkClickHandler(event:Event):void
			{
				var action:String = pageToolBar.selectedAction;
				if(action == PageToolBar.FIRST_PAGE)
				{
					setPage(1);
				}
				else if(action == PageToolBar.PRE_PAGE)
				{
					setPage(currentPage - 1);
				}
				else if(action == PageToolBar.NEXT_PAGE)
				{
					setPage(currentPage + 1);
				}
				else if(action == PageToolBar.LAST_PAGE)
				{
					setPage(allPagesCount);
				}
				else
				{
					//指定页跳转
					setPage(int(action)); 
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
	</fx:Declarations>
	
	<s:HGroup visible="{pageDetailInfoVisible}" includeInLayout="{pageDetailInfoVisible}" gap="0">
		<s:Label text="总数："/>
		<s:Label text="{allRecordsCount}" color="0x0000FF"/>
		<s:Label text="条   第" paddingLeft="1"/>
		<s:Label text="{currentPage}" color="0x0000FF"/>
		<s:Label text="页/共"/>
		<s:Label text="{allPagesCount}" color="0x0000FF"/>
		<s:Label text="页"/>
	</s:HGroup>
	<mx:Spacer width="100%" />
	
	<!--- 
		分页控件工具栏，为内部组件。 
		@private
	-->
	<supportClasses:PageToolBar id="pageToolBar"
								linkClick="pageToolBar_linkClickHandler(event)"
								visible="{pageCtrlToolsVisible}"
								includeInLayout="{pageCtrlToolsVisible}"
								enabled="{allPagesCount > 1}" 
								width="100%" />
	
</s:HGroup>





